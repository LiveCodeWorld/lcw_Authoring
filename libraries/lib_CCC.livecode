script "lib_CCC"
--> MetaData
-
name: lib_CCC
type: script library
version: 0.6
copyright: David Bovill
licence:  GPLv3
deps: lib_Fedwiki


/*
*/

--> CCC
-
command ccc_ProcessDrop rawPost
   put json_ToArray (rawPost) into dropArray
   put dropArray ["text"] into droppedURL
   if droppedURL is empty then 
      put "https://media.ccc.de/v/30C3_-_5437_-_en_-_saal_g_-_201312282245_-_plants_machines_-_mrv_-_bbuegler#video&t=2" into droppedURL
   end if
   
   put ccc_CreateVideoPageJson (droppedURL) into someJSON
   if the environment is not "development" then
      put new header "Content-Type: application/json; charset=utf-8"
      put new header "Access-Control-Allow-Origin: *"
      put new header "Access-Control-Allow-Headers: Accept, Authorization, Content-Type"
      put new header "Access-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE OPTIONS, LINK, UNLINK"
   end if
   put someJSON
end ccc_ProcessDrop

function ccc_CreateVideoPageJson droppedURL
   put ccc_FetchData (droppedURL) into cccArray
   put ccc_ConvertArray (cccArray) into pageArray
   put json_FromArray (pageArray) into someJSON
   return someJSON
end ccc_CreateVideoPageJson

function ccc_ConstructTagHTML cccArray
   -- https://media.ccc.de/tags/Art%20&%20Beauty 
   -- put cccArray ["ccctvURL"] into baseURL
   put "https://media.ccc.de/" into baseURL
   
   put cccArray ["tags"] into tagArray
   repeat for each key someTag in tagArray
      put tagArray [someTag] into relTagUrl
      put baseURL & relTagUrl into tagURL
      put html_ConstructRefLink (someTag, tagURL, "_blank") & comma & space after tagHTML
   end repeat
   put item 1 to -2 of tagHTML into tagHTML
   return tagHTML
end ccc_ConstructTagHTML

function ccc_ConstructAuthorHTML cccArray
   -- https://media.ccc.de/search?q=Robert%20M%20Ochshorn
   -- this looses the order of authors if this is important
   put cccArray ["authors"] into authorArray
   repeat for each key someAuthor in authorArray
      put authorArray [someAuthor] into authorUrl
      put html_ConstructRefLink (someAuthor, authorUrl, "_blank") after authorHTML
      put space & "and" & space  after authorHTML
   end repeat
   put word 1 to -2 of authorHTML into authorHTML
   return authorHTML
end ccc_ConstructAuthorHTML

function ccc_ConstructVideoHtml cccArray 
   put cccArray ["media"]["en-de"] into mediaArray
   if mediaArray is not an array then put cccArray ["media"]["en"] into mediaArray
   
   -- put keys (mediaArray) into videoTypes
   -- get mp4 first as it works on iOS
   put "MP4 (HD),mp4,WEBM (HD),webm" into videoTypes
   repeat for each item videoType in videoTypes
      put mediaArray [videoType] into videoURL
      if videoURL is not empty then exit repeat
   end repeat
   
   put html_ConstructVideoTag (videoURL, videoType, 420, true) into someHTML
   put ccc_ConstructVideoCaption (cccArray) after someHTML
   
   return someHTML
end ccc_ConstructVideoHtml

function ccc_ConstructMultiSourceVideoHtml cccArray
   -- used to create multiple source video tag
   -- this HTML5 does not display in Fedwiki HTML plugin for unknown (sanitization?) reasons
     
   put cccArray ["media"]["en-de"] into mediaArray
   if mediaArray is not an array then put cccArray ["media"]["en"] into mediaArray
   
   put empty into posterImageFile
   put html_ConstructVideoTag (420, true, posterImageFile) after someHTML -- opening video tag
   put keys (mediaArray) into videoTypes
   -- put "WEBM (HD),MP4 (HD),webm,mp4" into videoTypes
   repeat for each line videoType in videoTypes
      -- let's skip low res versions
      if videoTypes contains "WEBM (HD)" and videoType = "webm" then next repeat
      if videoTypes contains "MP4 (HD)" and videoType = "mp4" then next repeat
      
      put mediaArray [videoType] into videoURL
      if videoURL is empty then next repeat
      
      put html_ConstructVideoSourceTag (videoURL, videoType) after someHTML
   end repeat
   put "<p>" after someHTML
   put "This is fallback content to display for user agents that do not support the video tag." after someHTML
   put "</p>" after someHTML
   put "</video>" after someHTML
   
   put ccc_ConstructVideoCaption (cccArray) after someHTML
   
   return someHTML
end ccc_ConstructMultiSourceVideoHtml

function ccc_ConstructVideoCaption cccArray
   -- pageTitle, ccctvURL, pageAuthorLinks, dateDisplay
   put cccArray ["pageTitle"] into pageTitle
   put cccArray ["ccctvURL"] into ccctvURL
   put cccArray ["date"] into dateDisplay
   put ccc_ConstructAuthorHTML (cccArray) into pageAuthorLinks
   
   put "<br></br>" into someHTML
   put html_ConstructRefLink (pageTitle, ccctvURL, "_blank") into titleLink
   put titleLink && "- a talk by" && pageAuthorLinks && "at" && ccc_ConstructDateHtml (dateDisplay) after someHTML 
   
   put  ". This video is licensed" && html_ConstructRefLink ("CC-by-3.0", "http://creativecommons.org/licenses/by/3.0/", "_blank") after someHTML
   
   put ", courtesy of [[Chaos Computer Club]]" after someHTML
   -- put " <a href="&quote& ccctvURL &quote && "target=" &quote& "_blank" &quote& ">CCC</a>." after someHTML
   return someHTML
end ccc_ConstructVideoCaption

function ccc_ConstructDateHtml dateDisplay, pLinkText
   put ccc_NumFromYear (dateDisplay) into cccNum
   if pLinkText is empty then put "#" & cccNum & "c3" into pLinkText
   put "https://media.ccc.de/c/" & cccNum & "c3" into dateLink
   put html_ConstructRefLink (pLinkText, dateLink, "_blank") into someHTML
   return someHTML
end ccc_ConstructDateHtml

function ccc_HashtagFromYear dateDisplay
   put ccc_NumFromYear (dateDisplay) into cccNum
   put "#" & cccNum & "c3" into hashTag
   return hashTag
end ccc_HashtagFromYear

function ccc_NumFromYear dateDisplay
   set the itemdelimiter to "-"
   put item 1 of dateDisplay into someYear
   put someYear - 1983 into cccNum
   return cccNum
end ccc_NumFromYear

function ccc_ConvertArray cccArray, pSourceArray
   put cccArray ["pageTitle"] into pageTitle
   put cccArray ["pageSubTitle"] into pageSubTitle
   put cccArray ["description"] into pageDescription
   
   put pageArray_Construct (pageTitle, pageSubTitle) into pageArray
   
   put ccc_ConstructVideoHtml (cccArray) into videoHTML
   pageArray_AddHtml pageArray, videoHTML
   
   pageArray_AddMarkdown pageArray, "# About"
   put text_StripAllTags (pageDescription) into pageDescription
   pageArray_AddText pageArray, pageDescription
   
   pageArray_AddMarkdown pageArray, "# Date"
   put cccArray ["date"] into someDate
   put ccc_ConstructDateHtml (someDate, someDate) into dateDisplay
   pageArray_AddHtml pageArray, dateDisplay
   
   pageArray_AddMarkdown pageArray, "# People"
   put ccc_ConstructAuthorHTML (cccArray) into pageAuthorLinks
   pageArray_AddHtml pageArray, pageAuthorLinks
   
   pageArray_AddMarkdown pageArray, "# Tags"
   put ccc_ConstructTagHTML (cccArray) into pageTagLinks
   pageArray_AddHtml pageArray, pageTagLinks
   
   put "CCC Transporter" into pageArray ["metadata"]["author"] -- add some metadata so transported pages can be found
   put journalArray_Construct (pageTitle, pSourceArray) into pageArray ["journal"]  -- strip journal to minimum
   return pageArray
end ccc_ConvertArray

function ccc_FetchData videoPageURL
   put html_FetchTidy (videoPageURL) into tidyXML
   put ccc_ExtractData (tidyXML) into cccArray
   put videoPageURL into cccArray ["ccctvURL"]
   return cccArray
end ccc_FetchData

function ccc_ExtractData someHTML
   /*
   This code should be replaced by Xpath based code.
   
   Here we list classes of divs:
   div[3] = container-fluid
   div[3]/div = tab-content
   div[3]/div/div[3] = download
   */
   
   put revXMLCreateTree (someHTML, false, true, false) into treeID
   
   -- put html_ExtractNodeContents ("html/body/div[3]/h1[1]", tidyXML) into pageTitle
   put revXMLNodeContents (treeID, "html/body/div[3]/h1[1]") into pageTitle
   put pageTitle into cccArray ["pageTitle"]
   
   -- put html_ExtractNodeContents ("html/body/div[3]/h2[1]", tidyXML) into pageSubTitle
   put revXMLNodeContents (treeID, "html/body/div[3]/h2[1]") into pageSubTitle
   xml_BlankError pageSubTitle
   put pageSubTitle into cccArray ["pageSubTitle"]
   
   -- put html_ExtractNodeContents ("html/body/div[3]/p[3]", tidyXML) into someDescription
   put revXMLNodeContents (treeID, "html/body/div[3]/p[3]") into someDescription
   put revXMLText (treeID, "html/body/div[3]/p[3]") into someDescription
   put someDescription into cccArray ["description"]
   
   put revXMLNodeContents (treeID, "/html/body/div[3]/ul[2]/li[2]/span") into someDate
   put someDate into cccArray ["date"]
   
   /*
   -- put revXMLText (treeID, "html/body/div[3]/div/div[3]/ul[1]") into downLoadListNode
   -- //*[@id="download"]/ul/li[1]/a[1]
   -- //*[@id="download"]/ul/li[1]/span[1]
   put "//*[@id='download']" into downLoadXpath
   put revXMLDataFromXPathQuery (treeID, downLoadXpath) into tBooks
   put word 1 to -1 of revXMLEvaluateXPath (treeID, downLoadXpath) into downLoadNode
   put revXMLText (treeID, downLoadNode) into sfda
   -- "/bookstore/book/[price<30]/title"
   put "/h3[1]" after downLoadNode
   put revXMLDataFromXPathQuery (treeID, downLoadNode) into tBooks
   put revXMLEvaluateXPath (treeID, "//*[@id='download']") into downLoadNode
   
   put  "//*[@id='download']/h3[1]" into someXPath
   put revXMLEvaluateXPath (treeID, someXPath) into downLoadNode
   put revXMLEvaluateXPath (treeID, "//*[@id='download']/*") into downLoadNode
   */
   
   put revXMLMatchingNode (treeID, "html/body", "div", "id", "download", -1) into downLoadNode
   put downLoadNode & "/ul[1]/" into downLoadListNode
   
   -- put "html/body/div[3]/div/div[3]/ul[1]/" into downLoadListNode
   put revXMLChildNames (treeID, downLoadListNode, CR, "li", true) into tNames
   repeat for each line tName in tNames
      put downLoadListNode & tName into tNode
      put tNode & "/span[1]" into firstSpanNode
      put revXMLNodeContents (treeID, firstSpanNode) into mediaName
      put tNode & "/span[2]" into secondSpanNode
      put revXMLNodeContents (treeID, secondSpanNode) into mediaLanguage
      
      put tNode & "/a[1]" into hRefNode
      put revXMLAttribute (treeID, hRefNode, "href") into mediaUrl
      
      put mediaUrl into cccArray ["media"][mediaLanguage][mediaName]
   end repeat
   
   -- put html_ExtractAttribute ("href", "html/body/div[3]/div/div[3]/ul[1]/li[3]/a[1]", tidyXML) into webmUrl
   -- put revXMLAttribute (treeID, "html/body/div[3]/div/div[3]/ul[1]/li[3]/a[1]", "href") into webmUrl
   -- put webmUrl into cccArray ["webmUrl"]
   
   put "html/body/div[3]/" into fluidNode
   put revXMLChildNames (treeID, fluidNode, CR, "a", true) into tNames
   repeat for each line tName in tNames
      put fluidNode & tName into tNode
      put revXMLNodeContents (treeID, tNode) into someTag
      put revXMLAttribute (treeID, tNode, "href") into relTagLink
      put relTagLink into cccArray ["tags"][someTag]
   end repeat
   
   put "html/body/div[3]/p[1]/span" into personNode
   put revXMLChildNames (treeID, personNode, CR, empty, true) into tNames
   repeat for each line tName in tNames
      put personNode & "/" & tName into tNode
      
      -- put revXMLNodeContents ("html/body/div[3]/p[1]/span/a[1]", tidyXML) into personName
      put revXMLNodeContents (treeID, tNode) into personName
      -- put html_ExtractAttribute ("href", "html/body/div[3]/p[1]/span/a[1]", tidyXML) into relPersonLink
      put revXMLAttribute (treeID, tNode, "href") into relPersonLink
      put relPersonLink into cccArray ["authors"][personName]
   end repeat
   revXMLDeleteTree treeID
   return cccArray
end ccc_ExtractData


--> Deps
-
