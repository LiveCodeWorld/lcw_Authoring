script "lib_DirectoryWalker"
--> MetaData
-
license: GPLv3
name: lib_DirectoryWalker
type: library
version: 0.2

/*
In this library we keep everything to do with walking and filtering folders and files.
*/

getprop folder_StackFileArray
   put the stack_Folder of the target into someFolder
   put directory_NestedStackFileArray (someFolder) into stackFileArray
   return stackFileArray
end folder_StackFileArray

getprop module_StackNameArray
   put the module_Folder of the target into moduleFolder
   put directory_NestedArray (projectFolder) into stackNameArray
   return stackNameArray
end module_StackNameArray

getprop project_StackNameArray
   put the project_Folder of the target into projectFolder
   put directory_NestedArray (projectFolder) into stackNameArray
   return stackNameArray
end project_StackNameArray


--> Directory | List
-
function directory_ListNestedStackFiles someFolder
   if there is not a folder someFolder then return empty
   
   put directory_ListNestedPaths (someFolder) into nPaths
   repeat for each line sFile in nPaths
      if exists (stack sFile) then
         put sFile & CR after sFiles
      end if
   end repeat
   delete char -1 of sFiles
   return sFiles
end directory_ListNestedStackFiles


--> Directory | Array
-
function directory_NestedStackFileArray someFolder, pWithoutFolder
   if there is not a folder someFolder then return empty
   --
   set the itemdelimiter to slash
   put the number of items of someFolder into baseFolderNum
   --
   -- put directory_ListNestedPaths (someFolder) into nPaths
   put directory_ListStackPaths (someFolder, pWithoutFolder) into nPaths
   --
   repeat for each line sFile in nPaths
      if exists (stack sFile) then
         put the short name of stack sFile into stackName
         delete item 1 to baseFolderNum of sFile
         put sFile into sFileArray [stackName]
      end if
   end repeat
   return sFileArray
end directory_NestedStackFileArray

function directory_NestedStackFileArray someFolder
   if there is not a folder someFolder then return empty
   
   # Walk
   set the itemdelimiter to slash
   put the number of items of someFolder into baseFolderNum
   --
   put directory_ListNestedPaths (someFolder) into nPaths
   repeat for each line sFile in nPaths
      if exists (stack sFile) then
         put the short name of stack sFile into stackName
         delete item 1 to baseFolderNum of sFile
         put sFile into sFileArray [stackName]
      end if
   end repeat
   return sFileArray
end directory_NestedStackFileArray

function directory_NestedArray someFolder
   local folderArray
   if there is not a folder someFolder then return empty
   
   # Walk
   set the itemdelimiter to slash
   put item -1 of someFolder into shortFolder
   put the number of items of someFolder -1 into baseFolderNum
   _WalkDirectory folderArray, someFolder, baseFolderNum
   return folderArray [shortFolder]
end directory_NestedArray

function directory_ListNestedPaths someFolder, pSetRelative
   local NestedPaths
   if there is not a folder someFolder then return empty
   
   # Walk
   set the itemdelimiter to slash
   text_AddTrailing someFolder, slash
   if pSetRelative is true then
      put the number of items of someFolder into baseFolderNum
      _WalkAndList NestedPaths, someFolder, baseFolderNum
   else
      _WalkAndList NestedPaths, someFolder, baseFolderNum
   end if
   delete char -1 of NestedPaths
   return NestedPaths
end directory_ListNestedPaths

private command _WalkAndList @NestedPaths, someFolder, pBaseFolderNum
   -- recursive
   put files (someFolder) into shortFiles
   put someFolder into pathFolder
   if pBaseFolderNum is a number then
      set the itemdelimiter to slash
      delete item 1 to pBaseFolderNum of pathFolder
   end if
   
   # Add files (not folders) to NestedPaths
   filter shortFiles without ".*"
   repeat for each line shortFile in shortFiles
      if char 1 of shortFile = "." then next repeat
      put pathFolder & shortFile into foundPath
      put foundPath & CR after NestedPaths
   end repeat
   
   # Recurse
   put folders (someFolder) into shortChildFolders
   repeat for each line shortChildFolder in shortChildFolders
      if char 1 of shortChildFolder = "." then next repeat
      put someFolder & shortChildFolder & slash into childFolder
      _WalkAndList NestedPaths, childFolder, pBaseFolderNum
   end repeat
end _WalkAndList

private command _WalkDirectory @folderArray, someFolder, pBaseFolderNum, pQuick
   -- see more recent _WalkAndList
   put _GetFolderKey (someFolder, pBaseFolderNum) into folderKey
   --
   put files (someFolder) into shortFiles
   filter shortFiles without ".*"
   if pQuick is true then
      split shortFiles by CR as set
      put shortFiles into folderArray [folderKey]
   else
      repeat for each line shortFile in shortFiles
         if char 1 of shortFile = "." then next repeat
         put empty into folderArray [folderKey][shortFile]
      end repeat
   end if
   
   put folders (someFolder) into shortChildFolders
   repeat for each line shortChildFolder in shortChildFolders
      if char 1 of shortChildFolder = "." then next repeat
      put someFolder & shortChildFolder & slash into childFolder
      _WalkDirectory folderArray, childFolder, pBaseFolderNum
   end repeat
end _WalkDirectory

private function _GetFolderKey someFolder, baseFolderNum
   set the itemdelimiter to slash
   delete item 1 to baseFolderNum of someFolder
   
   if char -1 of someFolder is slash then delete char -1 of someFolder
   if char 1 of someFolder is slash then delete char 1 of someFolder
   split someFolder by slash
   --
   return someFolder
end _GetFolderKey


--> Folder | Array
-
function folder_ConstructArray someFolder
   -- one level not recursive
   local dataArray
   text_AddTrailing someFolder, slash
   put the directory into oDirectory
   set the directory to someFolder
   
   put the folders into newShortFolders
   if includeInvisible is not false then filter newShortFolders without ".*"
   -- what else needs escaping?
   replace "/" with ":" in newShortFolders
   
   repeat for each line shortFolder in newShortFolders
      put someFolder & shortFolder & "/" into nestedFolder
      set the directory to nestedFolder
      put the files into shortFiles
      if includeInvisible is not false then filter shortFiles without ".*"
      repeat for each line shortFile in shortFiles
         put nestedFolder & shortFile into filePath
         
         put dataArray [shortFolder] into fileIndex
         line_Insert shortFile, fileIndex
         put fileIndex into dataArray [shortFolder]
      end repeat
   end repeat
   set the directory to someFolder
   return dataArray
end folder_ConstructArray

function folder_ConstructDatagridArray someFolder, pIsExpanded
   local dgArray
   text_AddTrailing someFolder, slash
   put the directory into oDirectory
   set the directory to someFolder
   
   put the folders into newShortFolders
   if includeInvisible is not false then filter newShortFolders without ".*"
   -- what else needs escaping?
   replace "/" with ":" in newShortFolders
   
   repeat with lineNum = 1 to the number of lines of newShortFolders
      put pIsExpanded is true into dgArray [lineNum]["isExpanded"]
      put line lineNum of newShortFolders into shortFolder
      put shortFolder into dgArray [lineNum]["title"]
      
      put someFolder & shortFolder & "/" into nestedFolder
      put nestedFolder into dgArray [lineNum]["folder"]
      
      set the directory to nestedFolder
      put the files into shortFiles
      if includeInvisible is not false then filter shortFiles without ".*"
      repeat for each line shortFile in shortFiles
         put nestedFolder & shortFile into filePath
         
         put dgArray [lineNum]["files"] into fileIndex
         line_Insert shortFile, fileIndex
         put fileIndex into dgArray [lineNum]["files"]
      end repeat
   end repeat
   set the directory to someFolder
   return dgArray
end folder_ConstructDatagridArray


--> Folder | Recursive
-
function folder_GetNestedIndex someFolder
   -- a nested index of folders
   local foundFolders
   
   text_AddTrailing someFolder, slash
   put someFolder & return after foundFolders
   
   put the directory into oFolder
   set the directory to someFolder
   put the folders into folderIndex
   filter folderIndex without ".*"
   repeat for each line shortFolder in folderIndex
      put someFolder & shortFolder & "/" into nestedFolder
      put folder_GetNestedIndex (nestedFolder) & CR after foundFolders
   end repeat
   set the directory to oFolder
   delete last char of foundFolders
   return foundFolders
end folder_GetNestedIndex

function folder_ConstructFileOutline someFolder, @infoArray, excludeFolderList, includeInvisible, tabBit, pUseHtmlLinks
   local shortFileOutline
   
   if there is not a folder someFolder then return empty
   text_AddTrailing someFolder, slash
   put infoArray["FolderIndex"] into folderIndex 
   put infoArray["FileIndex"] into fileIndex 
   line_Insert someFolder, folderIndex
   put folderIndex into infoArray["FolderIndex"]
   
   put the directory into oDirectory
   set the directory to someFolder
   put the files into shortFiles
   if includeInvisible is not false then filter shortFiles without ".*"
   
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into filePath
      line_Insert filePath, fileIndex
      
      if pUseHtmlLinks is not true then
         put tabBit & shortFile into osTitle
      else
         put tabBit & html_ConstructNameLink(shortFile, filePath) into osTitle
      end if
      line_Insert osTitle, shortFileOutline
   end repeat
   put fileIndex into infoArray["FileIndex"]
   
   put the folders into newShortFolders
   if includeInvisible is not false then filter newShortFolders without ".*"
   
   -- what else needs escaping?
   replace "/" with ":" in newShortFolders
   
   repeat for each line shortFolder in newShortFolders
      if shortFolder is among the items of excludeFolderList then next repeat
      put someFolder & shortFolder & "/" into nestedFolder
      
      if pUseHtmlLinks is not true then
         put tabBit & shortFolder into osTitle
      else
         put tabBit & html_ConstructNameLink (shortFolder, nestedFolder) into osTitle
      end if
      line_Insert osTitle, shortFileOutline
      
      put tabBit & tab into nextTabBit
      put folder_ConstructFileOutline (nestedFolder, infoArray, excludeFolderList, includeInvisible, nextTabBit, pUseHtmlLinks) into nestedOutline
      line_Insert nestedOutline, shortFileOutline
   end repeat
   
   set the directory to oDirectory
   return shortFileOutline
end folder_ConstructFileOutline

command folder_ConstructStackArrays @stackNameArray, @bigFileIndex, someFolder, searchNested, skipArchives, excludedFolderList	# recursive function
   -- was "file_RecursiveStackSearch"
   -- seems to look at files several times ???
   if excludedFolderList is empty then put "CVS,retired,archive" into excludedFolderList
   if skipArchives is not false and (char 1 of someFolder is "." or someFolder is among the items of excludedFolderList) then
      return empty	# skip CVS folders
   end if
   
   put the directory into oFolder
   set the directory to someFolder
   put the files into shortFiles
   
   text_AddTrailing someFolder, slash
   _FilterAndAddStacks shortFiles, someFolder, stackNameArray, bigFileIndex
   
   if searchNested is not false then
      put the folders into tFolderList
      delete line 1 of tFolderList
      repeat for each line tFolder in tFolderList
         if the controlkey is "Down" then return foundFiles	# allow an exit?
         if skipArchives is not false and (char 1 of tFolder is "." or tFolder is among the items of excludedFolderList) then
            next repeat	# skip CVS folders
         end if
         
         put someFolder & tFolder & "/" into tNuFolder
         folder_ConstructStackArrays stackNameArray, bigFileIndex, tNuFolder, searchNested, skipArchives, excludedFolderList
      end repeat
   end if
   
   set the directory to oFolder
   return ""
end folder_ConstructStackArrays

private command _FilterAndAddStacks shortFiles, someFolder, @stackNameArray, @bigFileIndex
   local filteredFiles
   
   put shortFiles into mcFiles
   filter mcFiles with "*.mc"
   line_Insert mcFiles, filteredFiles
   
   put shortFiles into revFiles
   filter revFiles with "*.rev"
   line_Insert revFiles, filteredFiles
   
   if filteredFiles is not empty then
      repeat for each line filePath in filteredFiles
         put someFolder & filePath into tFilePath
         
         -- this is where you can test individual files
         set lockmessages to true
         if exists(stack tFilePath) then
            put the short name of stack tFilePath into stackName
            put the long name of stack tFilePath into mainStackObject
            
            indexArray_Add mainStackObject, stackName, stackNameArray
            
            put the substacks of stack tFilePath into subStackNames
            repeat for each line subStackName in subStackNames
               put the long name of stack subStackName of stack tFilePath into subStackObject
               
               indexArray_Add subStackObject, subStackName, stackNameArray
            end repeat
            
            put tFilePath & return after foundFiles
         end if
         set lockmessages to false
      end repeat
      
      put foundFiles after bigFileIndex
   end if
   return foundFiles
end _FilterAndAddStacks
