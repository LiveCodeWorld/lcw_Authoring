script "lib_DateTime"
--> MetaData
-
license: GPLv3
name: lib_DateTime
type: script library
version: 0.6

/*
A library for date time and project management stuff like scheduling.
*/


--> Working on
-
function date_DaysSinceMonday pDate
   if pDate is empty then put the seconds into pDate
   put day_MondayBefore (pDate) into mondayDate
   convert mondayDate to internet date
   put date_DaysBetween (mondayDate, pDate) into daysBetween
   return daysBetween
end date_DaysSinceMonday

function date_IsEarlier testDate, baseDate
   convert testDate to seconds
   convert baseDate to seconds
   return testDate < baseDate
end date_IsEarlier

function isLater secondDate, firstDate
   convert firstDate to seconds
   convert secondDate to seconds
   if secondDate >= firstDate then
      return true
   else
      return false
   end if
end isLater


--> Date
-
function date_CombineWithTime someDate, someTime
   convert (someDate && someTime) to internet date
   return it
end date_CombineWithTime

function date_GetRandom pStartDate, pEndDate
   put date_GetRandomSeconds (pStartDate, pEndDate) into randomDate
   convert randomDate to short date
   return randomDate
end date_GetRandom

function date_GetRandomSeconds pStartDate, pEndDate
   set the useSystemDate to true
   --
   if pStartDate is empty then
      put 0 into pStartDate
   else
      convert pStartDate to seconds
   end if
   --
   if pEndDate is empty then
      put the seconds into pEndDate
   else
      convert pEndDate to seconds
   end if
   
   put pEndDate - pStartDate into maxNum
   put random (maxNum) + pStartDate into randomSeconds
   return randomSeconds
end date_GetRandomSeconds

function date_InTicks someDate
   if someDate is empty then return the seconds
   
   set the useSystemDate to true
   convert someDate to seconds
   return someDate
end date_InTicks

function date_Round someDate, viewType
   convert someDate to dateItems
   if char 1 of viewType is "h" then
      put 0 into item 5 of someDate
      put 0 into item 6 of someDate
   else
      put 0 into item 4 of someDate
      put 0 into item 5 of someDate
      put 0 into item 6 of someDate
   end if
   convert someDate to seconds
   return someDate
end date_Round

function date_PadTwoZeros someNum
   return format("%02d", someNum)
   
   /*
   set the numberformat to "00.######"
   put item 1 of someNum + 0 into padedNum
   set the numberformat to "0.######"
   return padedNum
   */
   
   if the number of chars of someNum = 1 then
      return "0" & someNum
   else
      return someNum
   end if
end date_PadTwoZeros

function date_ConvertEnglish someDate, itemNum
   -- was "englishDate"
   if itemNum is empty then put 3 into itemNum
   convert someDate to short date
   set the itemdelimiter to "/"
   put someDate into englishDate
   put item 1 of someDate into item 2 of englishDate
   put item 2 of someDate into item 1 of englishDate
   return item 1 to itemNum of englishDate
end date_ConvertEnglish


--> Date | Months
-
function month_Name someDate
   convert someDate to long date
   return word 2 of someDate
end month_Name

function month_GetPeriod pStartTime, pEndTime
   -- was "monthsBetween"
   -- complex as depends on which month
   convert pStartTime to dateItems
   convert pEndTime to dateItems
   put item 1 of pStartTime into startYear
   put item 2 of pStartTime into startMonth
   put startYear * 12 + startMonth into startMonthNum
   
   put item 1 of pEndTime into endYear
   put item 2 of pEndTime into endMonth
   put endYear * 12 + endMonth into endMonthNum
   
   put endMonthNum - startMonthNum into numberOfMonths
   return numberOfMonths
end month_GetPeriod

on period_MonthStarting someDate, @startDate, @endDate
   put date_FirstOfMonth(someDate) into startDate
   put date_EndOfMonth(someDate) into endDate
end period_MonthStarting

on date_AddMonth monthsToAdd, startDate, @endMonth, @endYear
   put startDate into someDate
   
   convert someDate to dateItems
   put item 1 of someDate into tYear
   put item 2 of someDate into tMonth
   put (monthsToAdd+tMonth) mod 12 into endMonth
   if endMonth = 0 then put 12 into endMonth
   put ((monthsToAdd+tMonth) div 12) + tYear into endYear
   
   put endYear into item 1 of someDate
   put endMonth into item 2 of someDate
   put date_MaxDaysInMonth(endMonth, endYear) into item 3 of someDate
   put 2 into item 4 of someDate	# seems to be required !!!
   convert someDate to internet date
   return someDate
end date_AddMonth

on date_AddMonth monthsToAdd, startDate, @endMonth, @endYear
   /*
   Problem is if new month has less days in it than the original start date days
   then just adding a month will add 2 months on conversion as the overlap pushes it over the month
   */
   
   convert startDate to dateItems
   put startDate into someDate
   
   put item 3 to 7 of someDate into lastBit
   
   put 1 into item 3 of someDate
   put 2 into item 4 of someDate	# seems to be required !!!
   add monthsToAdd to item 2 of someDate
   convert someDate to dateItems
   
   put item 1 of someDate into endYear
   put item 2 of someDate into endMonth
   
   put lastBit into item 3 to 7 of someDate
   put date_MaxDaysInMonth(endMonth, endYear) into item 3 of someDate
   convert someDate to internet date
   return someDate
end date_AddMonth

function date_ExtractMonthName someDate
   convert someDate to long date
   return word 1 of item 2 of someDate
end date_ExtractMonthName


--> Date | Years
-
function year_Number someDate
   convert someDate to dateItems
   return item 1 of someDate
end year_Number

function date_IsLeapYear someDate
   convert someDate to dateitems
   put item 1 of someDate into theYear
   return (theYear mod 400 = 0) or (theYear mod 100 <> 0) and (theYear mod 4 = 0)
   
   put 2 into item 2 of someDate
   put 29 into item 3 of someDate
   convert someDate to dateitems
   return item 2 of someDate = 2
end date_IsLeapYear

function date_ExtractYear someDate
   convert someDate to dateItems
   return item 1 of someDate
end date_ExtractYear

function date_NextFinancialYear someDate
   convert someDate to dateItems
   put item 1 of someDate into someYear
   if item 2 of someDate < 4 then
      return "4/1/" & someYear
   else
      add 1 to someYear
      return "4/1/" & someYear
   end if
end date_NextFinancialYear


--> Date | Hours
-
function hour_GetPeriod startDate, someDate
   -- was "hoursBetween"
   convert startDate to seconds
   convert someDate to seconds
   put (someDate - startDate)/(60*60) into someHours
   return someHours
end hour_GetPeriod

function addHours howManyHours, someDate
   convert someDate to seconds
   add howManyHours * 60*60 to someDate
   return someDate
end addHours


--> Date | Weeks
-
function date_GetWeeksBetween startDate, someDate
   -- was "weeksBetween"
   convert startDate to seconds
   convert someDate to seconds
   put (someDate - startDate)/(7*60*60*24) into weekNum
   return weekNum
end date_GetWeeksBetween

command period_WeekStarting someDate, @startDate, @endDate
   put day_MondayBefore (someDate) into startDate
   put addDays (7, startDate) into endDate
end period_WeekStarting

function addWeeks howManyWeeks, someDate
   -- version addDays 8.4
   convert someDate to seconds
   add howManyWeeks * 7*24*60*60 to someDate
   -- convert someDate to short date
   return someDate
end addWeeks


--> Date | Days
-
function day_Name someDate
   convert someDate to long date
   return item 1 of someDate
end day_Name

function day_AbreviatedName someDate
   convert someDate to abbreviated date
   return item 1 of someDate
end day_AbreviatedName

function day_Number someDate
   convert someDate to dateItems
   return item 3 of someDate
end day_Number

function day_Suffix dayNum
   if dayNum is among the items of "1,2,3" then
      return "st"
   else
      return "th"
   end if
end day_Suffix

function date_DaysBetween startDate, someDate
   convert startDate to seconds
   convert someDate to seconds
   put (someDate - startDate)/(60*60*24) into days
   return days
end date_DaysBetween

function day_Round someDate
   -- not tested
   convert someDate to dateItems
   convert someDate to dateItems
   return someDate
end day_Round

function day_SundayAfter someDate
   convert someDate to dateItems
   put last item of someDate into dayNum
   put abs(dayNum - 1) into howManyDays
   put addDays(howManyDays, someDate) into newDate
   return date_Round(newDate, "d")
end day_SundayAfter

function day_SundayBefore someDate
   convert someDate to dateItems
   put last item of someDate into dayNum
   put - 1 * abs(dayNum - 1) into howManyDays
   put addDays(howManyDays, someDate) into newDate
   return date_Round(newDate, "d")
end day_SundayBefore

function day_MondayAfter someDate
   put day_DaysBefore(someDate, 2) into howManyDays
   put 7 - howManyDays into daysAfter
   put addDays(daysAfter, someDate) into newDate
   return date_Round(newDate, "d")
end day_MondayAfter

function day_MondayBefore pDate
   if pDate is empty then put the date into pDate
   --
   put day_DaysBefore (pDate, 2) into howManyDays
   put addDays (- howManyDays, pDate) into newDate
   return date_Round (newDate, "d")
end day_MondayBefore

function day_DaysBefore someDate, dayNum
   convert someDate to dateItems
   put last item of someDate into dateDayNum
   put dateDayNum - dayNum into modDays
   if modDays < 0 then add 7 to modDays
   return modDays
end day_DaysBefore

function date_FirstOfNextMonth someDate
   convert someDate to dateItems
   put item 2 of someDate into oMonthNum
   put oMonthNum + 1 into overMonthNum
   put overMonthNum mod 12 into newMonthNum
   put overMonthNum div 12 into addYearNum
   
   put newMonthNum into item 2 of someDate
   add addYearNum to item 1 of someDate
   put 1 into item 3 of someDate
   return date_Round(someDate, "d")
end date_FirstOfNextMonth

function date_FirstOfMonth someDate
   convert someDate to dateItems
   put 1 into item 3 of someDate
   return date_Round(someDate, "d")
end date_FirstOfMonth

function date_EndOfMonth someDate
   put date_FirstOfNextMonth(someDate) into firstNextMonth
   put addDays(-1, firstNextMonth) into lastOfMonth
   return date_Round(lastOfMonth, "d")
end date_EndOfMonth

function addDays howManyDays, someDate
   convert someDate to seconds
   add (howManyDays * 24*60*60) to someDate
   convert someDate to dateItems
   return someDate
   
   -- version addDays 8.4
   convert someDate to dateItems
   put item 3 of someDate + howManyDays into dayNum
   put dayNum into item 3 of someDate
   -- convert someDate to short date
   return someDate
end addDays

function date_MaxDaysInMonth theMonth, theYear
   put "1,January,3,March,5,May,7,July,8,August,10,October,12,December" into Months31
   put "4,April,6,June,9,September,11,November" into Months30
   if theMonth is among the items of Months31 then
      put 31 into HowManyDays
   else if theMonth is among the items of Months30 then
      put 30 into HowManyDays
   else --February
      if (theYear mod 400 = 0) or (theYear mod 100 <> 0) and (theYear mod 4 = 0) then
         put 29 into HowManyDays -- leap year
      else
         put 28 into HowManyDays
      end if
   end if
   return HowManyDays
   
   /*
   Base on the rhyme:
   30 days has September, April, June and Novemeber
   All the rest have 31
   Except Februaruy
   Which has 28 and 29 on a leap year
   */
   
   put 30 into item 9 of maxDaylist
   put 30 into item 4 of maxDaylist
   put 30 into item 6 of maxDaylist
   put 30 into item 11 of maxDaylist
   
   put 31 into item 1 of maxDaylist
   put 31 into item 3 of maxDaylist
   put 31 into item 5 of maxDaylist
   put 31 into item 7 of maxDaylist
   put 31 into item 8 of maxDaylist
   put 31 into item 10 of maxDaylist
   put 31 into item 12 of maxDaylist
   
   if date_IsLeapYear(someDate) then
      put 29 into item 2 of maxDaylist
   else
      put 28 into item 2 of maxDaylist
   end if
   
   return item theMonth of maxDaylist
end date_MaxDaysInMonth

function date_MaxDaysInMonth theMonth, theYear
   put "1,January,3,March,5,May,7,July,8,August,10,October,12,December" into Months31
   put "4,April,6,June,9,September,11,November" into Months30
   if theMonth is among the items of Months31 then
      put 31 into HowManyDays
   else if theMonth is among the items of Months30 then
      put 30 into HowManyDays
   else --February
      if (theYear mod 400 = 0) or (theYear mod 100 <> 0) and (theYear mod 4 = 0) then
         put 29 into HowManyDays -- leap year
      else
         put 28 into HowManyDays
      end if
   end if
   return HowManyDays
   
   /*
   Base on the rhyme:
   30 days has September, April, June and Novemeber
   All the rest have 31
   Except Februaruy
   Which has 28 and 29 on a leap year
   */
   
   put 30 into item 9 of maxDaylist
   put 30 into item 4 of maxDaylist
   put 30 into item 6 of maxDaylist
   put 30 into item 11 of maxDaylist
   
   put 31 into item 1 of maxDaylist
   put 31 into item 3 of maxDaylist
   put 31 into item 5 of maxDaylist
   put 31 into item 7 of maxDaylist
   put 31 into item 8 of maxDaylist
   put 31 into item 10 of maxDaylist
   put 31 into item 12 of maxDaylist
   
   if date_IsLeapYear(someDate) then
      put 29 into item 2 of maxDaylist
   else
      put 28 into item 2 of maxDaylist
   end if
   
   return item theMonth of maxDaylist
end date_MaxDaysInMonth


--> Date and Time | Picker
-
/*
Taken and modified a bit from eric.chatonet@wanadoo.fr date Picker 1.0
*/

function weekNum pDate, pBeginningDay
   -- recursive function
   if pDate is empty then put the date into pDate
   convert pDate to dateItems
   
   -- return the number of the current week according to ISO: first thursday of the year is always in the first week of the year
   -- the second param is "sunday" or "monday" and indicates the first week day displayed
   -- requires convertDate and dayNum functions
   if pBeginningDay is empty then put "monday" into pBeginningDay
   -- if the param is empty, assumes whole ISO norm
   
   ## computing the number of days in current week:
   get last item of pDate
   if pBeginningDay = "sunday" then
      put it into tNumOfDaysInCurrentWeek
   else
      if it = 1 then put 7 into tNumOfDaysInCurrentWeek
      else put it - 1 into tNumOfDaysInCurrentWeek
   end if
   
   ## computing the number of days in first week of the year:
   get convertDate(pDate,1,1) -- ∆
   if pBeginningDay = "sunday" then
      put (last item of it is not in "67") into tThursdayIsInFirstWeek
   else
      put (last item of it is not in "167") into tThursdayIsInFirstWeek
   end if
   
   if pBeginningDay = "sunday" then
      put 8 - (last item of it) into tNumOfDaysInFirstWeek
   else
      if last item of it = 1 then put 1 into tNumOfDaysInFirstWeek
      else put 9 - last item of it into tNumOfDaysInFirstWeek
   end if
   
   -- computing the week number and returning the result:
   get round(dayNum(pDate)) -- ∆
   if tThursdayIsInFirstWeek then
      if it <= tNumOfDaysInFirstWeek then
         return "1"
      else if (it > tNumOfDaysInFirstWeek) and (it <= tNumOfDaysInFirstWeek + tNumOfDaysInCurrentWeek) then
         return "2"
      else
         get ((it - (tNumOfDaysInFirstWeek + tNumOfDaysInCurrentWeek))/7)+2
         if it = 53 then
            if last item of convertDate(pDate,12,31) < 5 then
               return 1 -- ∆
            else return 53
         else if it = 54 then return 1
         else return it
      end if
   else
      if it <= tNumOfDaysInFirstWeek then
         get last item of convertDate(pDate,1,1) -- ∆
         if (it < 4 and pBeginningDay = "sunday") or (it <> 1 and it < 4 and pBeginningDay = "monday") then return 1 -- ∆
         else
            get convertDate(pDate,12,31) -- ∆
            subtract 1 from item 1 of it
            convert it to dateItems
            return weekNum(it,pBeginningDay)
         end if
      end if
   else if (it > tNumOfDaysInFirstWeek) and (it <= tNumOfDaysInFirstWeek + tNumOfDaysInCurrentWeek) then
      return "1"
   else
      return ((it - (tNumOfDaysInFirstWeek + tNumOfDaysInCurrentWeek))/7)+1
   end if
end if
end weekNum

function convertDate pDate,pMonth,pDay
   ## return a date converted:
   -- the single param is a date in dateItems format
   
   if pMonth <> empty then put pMonth into item 2 of pDate
   if pDay <> empty then put pDay into item 3 of pDate
   convert pDate to dateItems
   return pDate
end convertDate

function dayNum pDate
   ## return day number:
   -- the single param is a date in dateItems format
   -- requires convertDate function
   
   put pDate into tCurrentDate
   convert tCurrentDate to seconds
   put convertDate(pDate,1,1) into tJanuaryFirst -- ∆
   convert tJanuaryFirst to seconds
   return round((tCurrentDate-tJanuaryFirst)/86400) + 1
end dayNum
